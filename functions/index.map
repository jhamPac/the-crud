{"version":3,"sources":["graphql/resolvers.js","graphql/schema.js","source.js"],"names":["resolveFunctions","authors","id","firstName","lastName","posts","authorId","title","votes","Query","author","_","find","Mutation","upvotePost","postId","post","Error","Author","filter","Post","schema","gql","typeDefs","resolvers","admin","require","functions","express","cors","os","getCredentials","serviceKeys","homedir","adminCreds","credential","cert","databaseURL","fbConfig","process","env","LOCAL_TEST","config","firebase","initializeApp","DB","firestore","gqlServer","ApolloServer","playground","api","https","onRequest","createHandler","origin"],"mappings":";AA2CeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3Cf,MAAMC,EAAU,CACd,CAAEC,GAAI,EAAGC,UAAW,MAAOC,SAAU,WACrC,CAAEF,GAAI,EAAGC,UAAW,SAAUC,SAAU,aAGpCC,EAAQ,CACZ,CAAEH,GAAI,EAAGI,SAAU,EAAGC,MAAO,0BAA2BC,MAAO,GAC/D,CAAEN,GAAI,EAAGI,SAAU,EAAGC,MAAO,gBAAiBC,MAAO,GACrD,CAAEN,GAAI,EAAGI,SAAU,EAAGC,MAAO,mBAAoBC,MAAO,IAGpDR,EAAmB,CACvBS,MAAO,CACLJ,MAAK,IACIA,EAETK,OAAM,CAACC,GAAG,GAAET,KACHD,EAAQW,KAAKF,GAAUA,EAAOR,KAAOA,IAGhDW,SAAU,CACRC,WAAWH,GAAG,OAAEI,IACRC,MAAAA,EAAOX,EAAMO,KAAKI,GAAQA,EAAKd,KAAOa,GACxC,IAACC,EACG,MAAA,IAAIC,oCAAoCF,KAIzCC,OAFPA,EAAKR,OAAS,EAEPQ,IAGXE,OAAQ,CACNb,MAAMK,GACGL,EAAMc,OAAOH,GAAQA,EAAKV,WAAaI,EAAOR,KAGzDkB,KAAM,CACJV,OAAOM,GACEf,EAAQW,KAAKF,GAAUA,EAAOR,KAAOc,EAAKV,YAKxCN,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/Bf,IAAA,EAAA,QAAA,iCAEA,EAAA,EAAA,QAAA,gBA6Be,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3Bf,MAAMqB,EAASC,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;EA2BJ,IAAA,EAAA,CACbC,SAAUF,EACVG,UAAAA,EAAAA,SAFa,QAAA,QAAA;;ACCR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EARP,IAAA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,qBAOO,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhCP,MAAMC,EAAYC,QAAQ,kBACpBC,EAAYD,QAAQ,sBACpBE,EAAYF,QAAQ,WACpBG,EAAYH,QAAQ,QACpBI,EAAYJ,QAAQ,MAG1B,SAASK,IACDC,MAAAA,EAAcN,WAAWI,EAAGG,oCAM3BC,MALa,CAClBC,WAAYV,EAAMU,WAAWC,KAAKJ,GAClCK,YAAa,qCAMjB,MAAMC,EAAYC,QAAQC,IAAIC,WAAcV,IAAmBJ,EAAUe,SAASC,SAClFlB,EAAMmB,cAAcN,GAGpB,MAAMO,EAAKpB,EAAMqB,YAMXC,EAAY,IAAIC,EAAJ,aACb3B,EAAAA,GAAAA,EADa,QAAA,CAEhB4B,YAAY,KAGDC,EAAMvB,EAAUwB,MAAMC,UAAUL,EAAUM,cAAc,CACnExB,KAAM,CACJyB,OAAQ,QAFL,QAAA,IAAA","file":"index.map","sourceRoot":"","sourcesContent":["const authors = [\n  { id: 1, firstName: \"Tom\", lastName: \"Coleman\" },\n  { id: 2, firstName: \"Sashko\", lastName: \"Stubailo\" }\n]\n\nconst posts = [\n  { id: 1, authorId: 1, title: \"Introduction to GraphQL\", votes: 2 },\n  { id: 2, authorId: 2, title: \"GraphQL Rocks\", votes: 3 },\n  { id: 3, authorId: 2, title: \"Advanced GraphQL\", votes: 1 }\n]\n\nconst resolveFunctions = {\n  Query: {\n    posts() {\n      return posts\n    },\n    author(_, { id }) {\n      return authors.find(author => author.id === id)\n    }\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = posts.find(post => post.id === postId)\n      if (!post) {\n        throw new Error(`Couldn't find post with id ${postId}`)\n      }\n      post.votes += 1\n      // pubsub.publish('postUpvoted', post);\n      return post\n    }\n  },\n  Author: {\n    posts(author) {\n      return posts.filter(post => post.authorId === author.id)\n    }\n  },\n  Post: {\n    author(post) {\n      return authors.find(author => author.id === post.authorId)\n    }\n  }\n}\n\nexport default resolveFunctions\n","import { gql } from 'apollo-server-cloud-functions'\n\nimport resolvers from \"./resolvers\"\n\nconst schema = gql`\n  type Author {\n    id: Int! # the ! means that every author object _must_ have an id\n    firstName: String\n    lastName: String\n    posts: [Post] # the list of Posts by this author\n  }\n\n  type Post {\n    id: Int!\n    title: String\n    author: Author\n    votes: Int\n  }\n\n  # the schema allows the following query:\n  type Query {\n    posts: [Post]\n    author(id: Int!): Author\n  }\n\n  # this schema allows the following mutation:\n  type Mutation {\n    upvotePost(postId: Int!): Post\n  }\n`\n\nexport default {\n  typeDefs: schema,\n  resolvers\n}\n","const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\nconst express   = require('express')\nconst cors      = require('cors')\nconst os        = require('os')\n\n// FireBase setup\nfunction getCredentials() {\n  const serviceKeys = require(`${os.homedir()}/.firebase/keyfile.json`)\n  const adminCreds  = {\n    credential: admin.credential.cert(serviceKeys),\n    databaseURL: \"https://blackjynxy.firebaseio.com\"\n  }\n\n  return adminCreds\n}\n\nconst fbConfig = (process.env.LOCAL_TEST) ? getCredentials() : functions.config().firebase\nadmin.initializeApp(fbConfig)\n\n// FireStore reference\nconst DB = admin.firestore()\n\n// GraphQL deps\nimport { ApolloServer }   from 'apollo-server-cloud-functions'\nimport schema             from './graphql/schema'\n\nconst gqlServer = new ApolloServer({\n  ...schema,\n  playground: true\n})\n\nexport const api = functions.https.onRequest(gqlServer.createHandler({\n  cors: {\n    origin: '*'\n  }\n}))\n"]}
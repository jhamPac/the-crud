{"version":3,"sources":["firebaseSingleton.js","graphql/resolvers.js","graphql/schema.js","source.js"],"names":["admin","require","functions","initializeApp","config","firebase","resolveFunctions","foods","fireStore","collection","doc","getDoc","get","catch","err","Error","foodObj","data","Object","keys","reduce","acc","curr","food","name","inStock","concat","foodSupply","firestore","Query","typeDefs","gql","resolvers","gqlServer","ApolloServer","schema","playground","api","https","onRequest","createHandler","cors","origin"],"mappings":";AAIA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,WAAA,EAJA,MAAMA,EAAYC,QAAQ,kBAI1B,QAAA,MAAA,EAHA,MAAMC,EAAYD,QAAQ,sBAG1B,QAAA,UAAA,EAAAD,EAAMG,cAAcD,EAAUE,SAASC;;ACqCxBC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzCf,IAAA,EAAA,QAAA,wBAyCeA,IAAAA,EAAAA,MArCf,IAAA,EAAA,EAAA,YACQC,MAAAA,EAAQC,EAAUC,WAAW,cAAcC,IAAI,QAC/CC,QAAeJ,EAAMK,MAAMC,MAAM,SAAAC,GAC/B,MAAA,IAAIC,MAAMD,KAGZE,QAAgBL,EAAOM,OAEtBC,OAAAA,OAAOC,KAAKH,GAASI,OAAO,SAACC,EAAKC,GACnCC,IAAAA,EAAO,CACTC,KAAMF,EACNG,QAAST,EAAQM,GAAR,SAGJD,OAAAA,EAAIK,OAAOH,IAEjB,MAhBUI,OAAAA,WAqCArB,OAAAA,EAAAA,MAAAA,KAAAA,aAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,WAAAA,IAAAA,EAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,IAAAA,QAAAA,SAAAA,EAAAA,GAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,YAAAA,EAAAA,GAAAA,IAAAA,EAAAA,KAAAA,OAAAA,QAAAA,QAAAA,GAAAA,KAAAA,SAAAA,GAAAA,EAAAA,OAAAA,IAAAA,SAAAA,GAAAA,EAAAA,QAAAA,KAAAA,EAAAA,GAAAA,CAAAA,WAvCf,MAAME,EAAYR,EAAM4B,MAAAA,YAsBlBtB,EAAmB,CACvBuB,MAAO,CACLF,WAAAA,IAeWrB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACnBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtBf,IAAA,EAAA,QAAA,iCAEA,EAAA,EAAA,QAAA,gBAoBe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlBf,MAAMwB,EAAWC,EAAI;;;;;;;;;;;;;;;;EAkBN,IAAA,EAAA,CACbD,SAAAA,EACAE,UAAAA,EAAAA,SAFa,QAAA,QAAA;;ACVR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAZP,IAAA,EAAA,QAAA,uBAGA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,qBAQO,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GANP,MAAMC,EAAY,IAAIC,EAAJ,aACbC,EAAAA,GAAAA,EADa,QAAA,CAEhBC,YAAY,KAIDC,EAAMnC,EAAUoC,UAAAA,MAAMC,UAAUN,EAAUO,cAAc,CACnEC,KAAM,CACJC,OAAQ,QAFL,QAAA,IAAA","file":"index.map","sourceRoot":"","sourcesContent":["const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\n\n// FireBase setup\nadmin.initializeApp(functions.config().firebase)\n\nexport { admin, functions }\n","import { admin } from '../firebaseSingleton'\n\nconst fireStore = admin.firestore()\n\nasync function foodSupply() {\n  const foods = fireStore.collection('provisions').doc('food')\n  const getDoc = await foods.get().catch(err => {\n    throw new Error(err)\n  })\n\n  const foodObj = await getDoc.data()\n\n  return Object.keys(foodObj).reduce((acc, curr) => {\n    let food = {\n      name: curr,\n      inStock: foodObj[curr]['inStock']\n    }\n\n    return acc.concat(food)\n\n  }, [])\n}\n\n\nconst resolveFunctions = {\n  Query: {\n    foodSupply\n  }\n  // Mutation: {\n  //   upvotePost(_, { postId }) {\n  //     const post = posts.find(post => post.id === postId)\n  //     if (!post) {\n  //       throw new Error(`Couldn't find post with id ${postId}`)\n  //     }\n  //     post.votes += 1\n  //     // pubsub.publish('postUpvoted', post);\n  //     return post\n  //   }\n  // }\n}\n\nexport default resolveFunctions\n","import { gql } from 'apollo-server-cloud-functions'\n\nimport resolvers from \"./resolvers\"\n\nconst typeDefs = gql`\n  type Food {\n    id: ID!\n    name: String\n    inStock: Int\n  }\n\n  # the schema allows the following query:\n  type Query {\n    foodSupply: [Food]\n  }\n\n  # this schema allows the following mutation:\n  # type Mutation {\n  #   upvotePost(postId: Int!): Post\n  # }\n`\n\nexport default {\n  typeDefs,\n  resolvers\n}\n","import { functions } from './firebaseSingleton'\n\n// GraphQL\nimport { ApolloServer }   from 'apollo-server-cloud-functions'\nimport schema             from './graphql/schema'\n\nconst gqlServer = new ApolloServer({\n  ...schema,\n  playground: true\n})\n\n// export Firebase function handler\nexport const api = functions.https.onRequest(gqlServer.createHandler({\n  cors: {\n    origin: '*'\n  }\n}))\n"]}
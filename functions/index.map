{"version":3,"sources":["source.js"],"names":["admin","require","functions","express","cors","os","serviceKeys","homedir","adminCreds","credential","cert","databaseURL","adminConfig","process","env","LOCAL_TEST","config","firebase","initializeApp","DB","firestore","apolloServerExpress","schemaPrinter","WAF","options","use","req","res","next","setHeader","get","collection","doc","then","exists","console","log","data","catch","err","send","set","listen","api","https","onRequest","path","url"],"mappings":";AA8DO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EA9DP,MAAMA,EAAYC,QAAQ,kBACpBC,EAAYD,QAAQ,sBACpBE,EAAYF,QAAQ,WACpBG,EAAYH,QAAQ,QACpBI,EAAYJ,QAAQ,MAGpBK,EAAcL,WAAWI,EAAGE,oCAC5BC,EAAc,CAClBC,WAAYT,EAAMS,WAAWC,KAAKJ,GAClCK,YAAa,qCAGTC,EAAeC,QAAQC,IAAIC,WAAcP,EAAaN,EAAUc,SAASC,SAE/EjB,EAAMkB,cAAcN,GACpB,MAAMO,EAAKnB,EAAMoB,YAGXC,EAAsBpB,QAAQ,yBAC9BqB,EAAsBrB,QAAQ,mCAI9BsB,EAAMpB,IACZoB,EAAIC,QAAQ,IAAKpB,KAEjBmB,EAAIE,IAAI,CAACC,EAAKC,EAAKC,KACjBD,EAAIE,UAAU,gBAAiB,uCACxBD,MAGTL,EAAIO,IAAI,aAAc,CAACJ,EAAKC,KACZR,EAAGY,WAAW,cAAcC,IAAI,QACzBF,MACpBG,KAAKD,IACCA,EAAIE,OAGPC,QAAQC,IAAI,iBAAkBJ,EAAIK,QAFlCF,QAAQC,IAAI,uBAKfE,MAAMC,IACLJ,QAAQC,IAAI,yBAA0BG,KAExCZ,EAAIa,KAAK,+BAGXjB,EAAIO,IAAI,QAAS,CAACJ,EAAKC,KACrBA,EAAIc,IAAI,eAAgB,cACxBd,EAAIa,KAAK,yCAGXjB,EAAIE,IAAI,IAAK,CAACC,EAAKC,KACjBA,EAAIc,IAAI,eAAgB,cACxBd,EAAIa,KAAK,0CAGP3B,QAAQC,IAAIC,YACdQ,EAAImB,OAAO,IAAM,IAAMP,QAAQC,IAAK,uCAG/B,MAAMO,EAAMzC,EAAU0C,MAAMC,UAAU,CAACnB,EAAKC,KAC7CD,EAAIoB,OACRpB,EAAIqB,QAAUrB,EAAIqB,OAGZxB,EAAIG,EAAKC,KALV,QAAA,IAAA","file":"index.map","sourceRoot":"","sourcesContent":["const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\nconst express   = require('express')\nconst cors      = require('cors')\nconst os        = require('os')\n\n// FireStore\nconst serviceKeys = require(`${os.homedir()}/.firebase/keyfile.json`)\nconst adminCreds  = {\n  credential: admin.credential.cert(serviceKeys),\n  databaseURL: \"https://blackjynxy.firebaseio.com\"\n}\n\nconst adminConfig = (process.env.LOCAL_TEST) ? adminCreds : functions.config().firebase\n\nadmin.initializeApp(adminConfig)\nconst DB = admin.firestore()\n\n// GraphQL deps\nconst apolloServerExpress = require('apollo-server-express')\nconst schemaPrinter       = require('graphql/utilities/schemaPrinter')\n// const schema              = require('./graphql/schema')\n\n// W.eb A.pplication F.ramework\nconst WAF = express()\nWAF.options('*', cors())\n\nWAF.use((req, res, next) => {\n  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate')\n  return next()\n})\n\nWAF.get('/celebrate', (req, res) => {\n  const foods = DB.collection('provisions').doc('food')\n  const getDoc = foods.get()\n  .then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      console.log('Document data:', doc.data());\n    }\n  })\n  .catch(err => {\n    console.log('Error getting document', err);\n  });\n  res.send('Yaaaaay it was Christmas!')\n})\n\nWAF.get('/home', (req, res) => {\n  res.set('Content-Type', 'text/plain')\n  res.send('Keep the change you stinkin animal!')\n})\n\nWAF.use('/', (req, res) => {\n  res.set('Content-Type', 'text/plain')\n  res.send('Merry Christmas and a Happy New Year')\n})\n\nif (process.env.LOCAL_TEST) {\n  WAF.listen(3000, () => console.log(`Example app listening on port 3000`))\n}\n\nexport const api = functions.https.onRequest((req, res) => {\n\tif (!req.path) {\n\t\treq.url = `/${req.url}`\n\t}\n\n\treturn WAF(req, res)\n})\n"]}
{"version":3,"sources":["graphql/resolvers.js","graphql/schema.js","source.js"],"names":["resolveFunctions","authors","id","firstName","lastName","posts","authorId","title","votes","Query","author","_","find","Mutation","upvotePost","postId","post","Error","Author","filter","Post","schema","typeDefs","resolvers","admin","require","functions","express","cors","os","getCredentials","serviceKeys","homedir","adminCreds","credential","cert","databaseURL","fbConfig","process","env","LOCAL_TEST","config","firebase","initializeApp","DB","firestore","apolloServerExpress","schemaPrinter","WAF","options","use","req","res","next","setHeader","graphqlExpress","context","graphiqlExpress","endpointURL","set","send","get","foods","collection","doc","getDoc","catch","err","status","render","message","error","json","data","listen","console","log","api","https","onRequest","path","url"],"mappings":"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","file":"index.map","sourceRoot":"","sourcesContent":["const authors = [\n  { id: 1, firstName: \"Tom\", lastName: \"Coleman\" },\n  { id: 2, firstName: \"Sashko\", lastName: \"Stubailo\" }\n]\n\nconst posts = [\n  { id: 1, authorId: 1, title: \"Introduction to GraphQL\", votes: 2 },\n  { id: 2, authorId: 2, title: \"GraphQL Rocks\", votes: 3 },\n  { id: 3, authorId: 2, title: \"Advanced GraphQL\", votes: 1 }\n]\n\nconst resolveFunctions = {\n  Query: {\n    posts() {\n      return posts\n    },\n    author(_, { id }) {\n      return authors.find(author => author.id === id)\n    }\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = posts.find(post => post.id === postId)\n      if (!post) {\n        throw new Error(`Couldn't find post with id ${postId}`)\n      }\n      post.votes += 1\n      // pubsub.publish('postUpvoted', post);\n      return post\n    }\n  },\n  Author: {\n    posts(author) {\n      return posts.filter(post => post.authorId === author.id)\n    }\n  },\n  Post: {\n    author(post) {\n      return authors.find(author => author.id === post.authorId)\n    }\n  }\n}\n\nexport default resolveFunctions\n","import { makeExecutableSchema } from \"graphql-tools\"\n\nimport resolvers from \"./resolvers\"\n\nconst schema =`\ntype Author {\n  id: Int! # the ! means that every author object _must_ have an id\n  firstName: String\n  lastName: String\n  posts: [Post] # the list of Posts by this author\n}\ntype Post {\n  id: Int!\n  title: String\n  author: Author\n  votes: Int\n}\n# the schema allows the following query:\ntype Query {\n  posts: [Post]\n  author(id: Int!): Author\n}\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: Int!\n  ): Post\n}\n`\n\nexport default makeExecutableSchema({\n  typeDefs: schema,\n  resolvers\n})\n","const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\nconst express   = require('express')\nconst cors      = require('cors')\nconst os        = require('os')\n\n// FireBase setup\nfunction getCredentials() {\n  const serviceKeys = require(`${os.homedir()}/.firebase/keyfile.json`)\n  const adminCreds  = {\n    credential: admin.credential.cert(serviceKeys),\n    databaseURL: \"https://blackjynxy.firebaseio.com\"\n  }\n\n  return adminCreds\n}\n\nconst fbConfig = (process.env.LOCAL_TEST) ? getCredentials() : functions.config().firebase\nadmin.initializeApp(fbConfig)\n\n// FireStore reference\nconst DB = admin.firestore()\n\n// GraphQL deps\nconst apolloServerExpress = require('apollo-server-express')\nconst schemaPrinter       = require('graphql/utilities/schemaPrinter')\nconst schema              = require('./graphql/schema')\n\n// W.eb A.pplication F.ramework\nconst WAF = express()\nWAF.options('*', cors())\n\n// Routes\nWAF.use((req, res, next) => {\n  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate')\n  return next()\n})\n\n// /api/graphql\n WAF.use(\n   \"/graphql\",\n   apolloServerExpress.graphqlExpress({ schema, context: {} })\n )\n\n // /api/graphiql\n WAF.use(\n   \"/graphiql\",\n   apolloServerExpress.graphiqlExpress({ endpointURL: \"/api/graphql\" })\n )\n\n // /api/schema\n WAF.use(\"/schema\", (req, res) => {\n   res.set(\"Content-Type\", \"text/plain\")\n   res.send(schemaPrinter(schema))\n })\n\nWAF.get('/provisions/food', async (req, res) => {\n  const foods = DB.collection('provisions').doc('food')\n  const getDoc = await foods.get().catch(err => {\n    res.status(500)\n    res.render('error', {\n     message: err.message,\n     error: err\n    })\n  })\n\n  res.setHeader('Content-Type', 'application/json')\n  res.json(getDoc.data())\n})\n\nWAF.use('/', (req, res) => {\n  res.set('Content-Type', 'text/plain')\n  res.send('Welcome to data fetcher 3000!')\n})\n\n// start local server if testing locally\nif (process.env.LOCAL_TEST) {\n  WAF.listen(3000, () => console.log(`Example app listening on port 3000`))\n}\n\nexport const api = functions.https.onRequest((req, res) => {\n\tif (!req.path) {\n\t\treq.url = `/${req.url}`\n\t}\n\n\treturn WAF(req, res)\n})\n"]}
{"version":3,"sources":["firebaseSingleton.js","graphql/resolvers.js","graphql/schema.js","source.js"],"names":["admin","require","functions","initializeApp","config","firebase","resolveFunctions","fireStore","firestore","FOOD_REF","collection","doc","getFoodSupply","foodDoc","foodInfo","get","catch","err","Error","data","Object","keys","reduce","info","acc","key","index","concat","createFoodItem","addFoodToSupply","root","label","inStock","payload","update","Query","Mutation","typeDefs","gql","resolvers","gqlServer","ApolloServer","schema","playground","api","https","onRequest","createHandler","cors","origin","vulcan","document","onWrite","change","context","console","log","before","after"],"mappings":";AAIA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,WAAA,EAJA,MAAMA,EAAYC,QAAQ,kBAI1B,QAAA,MAAA,EAHA,MAAMC,EAAYD,QAAQ,sBAG1B,QAAA,UAAA,EAAAD,EAAMG,cAAcD,EAAUE,SAASC;;ACsCxBC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1Cf,IAAA,EAAA,QAAA,wBAEA,MAAMC,EAAYP,EAAMQ,MAAAA,YAClBC,EAAYF,EAAUG,WAAW,cAAcC,IAAI,QAEzD,eAAeC,IACPC,MAIAC,SAJgBL,EAASM,MAAMC,MAAMC,IACnC,MAAA,IAAIC,MAAMD,MAGaE,OAKxBC,OAAAA,OAAOC,KAAKP,GAAUQ,OAJNC,CAAAA,GAAQ,CAACC,EAAKC,EAAKC,IACjCF,EAAIG,OAAOJ,EAAKE,IAGWG,CAAed,GAAW,IAGhE,eAAee,EAAgBC,GAAM,MAAEC,EAAF,QAASC,IACtCC,MAAAA,EAAU,CACbF,CAAAA,GAAQ,CACPA,MAAAA,EACAC,QAAAA,IAMGC,aAFDxB,EAASyB,OAAOD,GAEfA,EAAQF,GAIjB,MAAMzB,EAAmB,CACvB6B,MAAO,CACLvB,cAAAA,GAGFwB,SAAU,CACRP,gBAAAA,IAIWvB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACpBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtBf,IAAA,EAAA,QAAA,iCAEA,EAAA,EAAA,QAAA,gBAoBe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlBf,MAAM+B,EAAWC,EAAI;;;;;;;;;;;;;;;;EAkBN,IAAA,EAAA,CACbD,SAAAA,EACAE,UAAAA,EAAAA,SAFa,QAAA,QAAA;;ACHR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,SAAA,EAnBP,IAAA,EAAA,QAAA,uBAGA,EAAA,QAAA,iCACA,EAAA,EAAA,QAAA,qBAeO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAbP,MAAMC,EAAY,IAAIC,EAAJ,aACbC,EAAAA,GAAAA,EADa,QAAA,CAEhBC,YAAY,KAIDC,EAAM1C,EAAU2C,UAAAA,MAAMC,UAAUN,EAAUO,cAAc,CACnEC,KAAM,CACJC,OAAQ,QAKL,QAAA,IAAA,EAAA,MAAMC,EAAShD,EAAUM,UAAAA,UAAU2C,SAAS,mBAAmBC,QAAQ,CAACC,EAAQC,KACrFC,QAAQC,IAAIH,EAAOI,OAAOtC,QAC1BoC,QAAQC,IAAIH,EAAOK,MAAMvC,UAFpB,QAAA,OAAA","file":"index.map","sourceRoot":"","sourcesContent":["const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\n\n// FireBase setup\nadmin.initializeApp(functions.config().firebase)\n\nexport { admin, functions }\n","import { admin } from '../firebaseSingleton'\n\nconst fireStore = admin.firestore()\nconst FOOD_REF  = fireStore.collection('provisions').doc('food')\n\nasync function getFoodSupply() {\n  const foodDoc = await FOOD_REF.get().catch(err => {\n    throw new Error(err)\n  })\n\n  const foodInfo       = foodDoc.data()\n  const createFoodItem = info => (acc, key, index) => {\n    return acc.concat(info[key])\n  }\n\n  return Object.keys(foodInfo).reduce(createFoodItem(foodInfo), [])\n}\n\nasync function addFoodToSupply(root, { label, inStock }) {\n  const payload = {\n    [label]: {\n      label,\n      inStock\n    }\n  }\n\n  await FOOD_REF.update(payload)\n\n  return payload[label]\n}\n\n\nconst resolveFunctions = {\n  Query: {\n    getFoodSupply\n  },\n\n  Mutation: {\n    addFoodToSupply\n  }\n}\n\nexport default resolveFunctions\n","import { gql } from 'apollo-server-cloud-functions'\n\nimport resolvers from \"./resolvers\"\n\nconst typeDefs = gql`\n  type Food {\n    id: ID!\n    label: String\n    inStock: Int\n  }\n\n  # the schema allows the following query:\n  type Query {\n    getFoodSupply: [Food]\n  }\n\n  # this schema allows the following mutation:\n  type Mutation {\n    addFoodToSupply(label: String!, inStock: Int!): Food\n  }\n`\n\nexport default {\n  typeDefs,\n  resolvers\n}\n","import { functions } from './firebaseSingleton'\n\n// GraphQL\nimport { ApolloServer } from 'apollo-server-cloud-functions'\nimport schema           from './graphql/schema'\n\nconst gqlServer = new ApolloServer({\n  ...schema,\n  playground: true\n})\n\n// graphql endpoint\nexport const api = functions.https.onRequest(gqlServer.createHandler({\n  cors: {\n    origin: '*'\n  }\n}))\n\n// firestore onWrite trigger\nexport const vulcan = functions.firestore.document('provisions/food').onWrite((change, context) => {\n  console.log(change.before.data())\n  console.log(change.after.data())\n})\n"]}
{"version":3,"sources":["source.js"],"names":["admin","require","functions","express","cors","os","getCredentials","serviceKeys","homedir","adminCreds","credential","cert","databaseURL","fbConfig","process","env","LOCAL_TEST","config","firebase","initializeApp","DB","firestore","apolloServerExpress","schemaPrinter","WAF","options","use","req","res","next","setHeader","get","foods","collection","doc","getDoc","catch","err","status","render","message","error","json","data","set","send","listen","console","log","api","https","onRequest","path","url"],"mappings":";AA8DO,aAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,IAAA,EAAA,KAAA,OAAA,QAAA,QAAA,GAAA,KAAA,SAAA,GAAA,EAAA,OAAA,IAAA,SAAA,GAAA,EAAA,QAAA,KAAA,EAAA,GAAA,CAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EA9DP,MAAMA,EAAYC,QAAQ,kBACpBC,EAAYD,QAAQ,sBACpBE,EAAYF,QAAQ,WACpBG,EAAYH,QAAQ,QACpBI,EAAYJ,QAAQ,MAG1B,SAASK,IACDC,MAAAA,EAAcN,WAAWI,EAAGG,oCAM3BC,MALa,CAClBC,WAAYV,EAAMU,WAAWC,KAAKJ,GAClCK,YAAa,qCAMjB,MAAMC,EAAYC,QAAQC,IAAIC,WAAcV,IAAmBJ,EAAUe,SAASC,SAClFlB,EAAMmB,cAAcN,GAGpB,MAAMO,EAAKpB,EAAMqB,YAGXC,EAAsBrB,QAAQ,yBAC9BsB,EAAsBtB,QAAQ,mCAI9BuB,EAAMrB,IACZqB,EAAIC,QAAQ,IAAKrB,KAGjBoB,EAAIE,IAAI,CAACC,EAAKC,EAAKC,KACjBD,EAAIE,UAAU,gBAAiB,uCACxBD,MAGTL,EAAIO,IAAI,mBAAR,MAA4B,IAAA,EAAA,EAAA,UAAOJ,EAAKC,GAChCI,MAAAA,EAAQZ,EAAGa,WAAW,cAAcC,IAAI,QACxCC,QAAeH,EAAMD,MAAMK,MAAM,SAAAC,GACrCT,EAAIU,OAAO,KACXV,EAAIW,OAAO,QAAS,CACnBC,QAASH,EAAIG,QACbC,MAAOJ,MAIVT,EAAIE,UAAU,eAAgB,oBAC9BF,EAAIc,KAAKP,EAAOQ,UAXlB,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,MAAA,KAAA,aAAA,IAcAnB,EAAIE,IAAI,IAAK,CAACC,EAAKC,KACjBA,EAAIgB,IAAI,eAAgB,cACxBhB,EAAIiB,KAAK,mCAIP/B,QAAQC,IAAIC,YACdQ,EAAIsB,OAAO,IAAM,IAAMC,QAAQC,IAAK,uCAG/B,MAAMC,EAAM/C,EAAUgD,MAAMC,UAAU,CAACxB,EAAKC,KAC7CD,EAAIyB,OACRzB,EAAI0B,QAAU1B,EAAI0B,OAGZ7B,EAAIG,EAAKC,KALV,QAAA,IAAA","file":"index.map","sourceRoot":"","sourcesContent":["const admin     = require('firebase-admin')\nconst functions = require('firebase-functions')\nconst express   = require('express')\nconst cors      = require('cors')\nconst os        = require('os')\n\n// FireBase setup\nfunction getCredentials() {\n  const serviceKeys = require(`${os.homedir()}/.firebase/keyfile.json`)\n  const adminCreds  = {\n    credential: admin.credential.cert(serviceKeys),\n    databaseURL: \"https://blackjynxy.firebaseio.com\"\n  }\n\n  return adminCreds\n}\n\nconst fbConfig = (process.env.LOCAL_TEST) ? getCredentials() : functions.config().firebase\nadmin.initializeApp(fbConfig)\n\n// FireStore reference\nconst DB = admin.firestore()\n\n// GraphQL deps\nconst apolloServerExpress = require('apollo-server-express')\nconst schemaPrinter       = require('graphql/utilities/schemaPrinter')\n// const schema           = require('./graphql/schema')\n\n// W.eb A.pplication F.ramework\nconst WAF = express()\nWAF.options('*', cors())\n\n// Routes\nWAF.use((req, res, next) => {\n  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate')\n  return next()\n})\n\nWAF.get('/provisions/food', async (req, res) => {\n  const foods = DB.collection('provisions').doc('food')\n  const getDoc = await foods.get().catch(err => {\n    res.status(500)\n    res.render('error', {\n     message: err.message,\n     error: err\n    })\n  })\n\n  res.setHeader('Content-Type', 'application/json')\n  res.json(getDoc.data())\n})\n\nWAF.use('/', (req, res) => {\n  res.set('Content-Type', 'text/plain')\n  res.send('Welcome to data fetcher 3000!')\n})\n\n// start local server if testing locally\nif (process.env.LOCAL_TEST) {\n  WAF.listen(3000, () => console.log(`Example app listening on port 3000`))\n}\n\nexport const api = functions.https.onRequest((req, res) => {\n\tif (!req.path) {\n\t\treq.url = `/${req.url}`\n\t}\n\n\treturn WAF(req, res)\n})\n"]}